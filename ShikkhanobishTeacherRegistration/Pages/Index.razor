@page "/"
@using System.Timers
    <div class="gradientBAckground">
        <div style="flex:auto">
            <div class="@StartAnim1stBlock">
                <img class="@picClass" src="WhiteLogo.png" style="opacity: @op;" />
                Welcome To Shikkhanobish Teacher Registration<br>
                <div class="basicDiv @animClass" style="opacity: @op;">
                    <div class="form__group field">
                        <input class="form__field" placeholder="Name" name="name" id='name' required />
                        <label for="name" class="form__label" style="color:#E7E7E7">Name</label>
                    </div>
                    <div class="form__group field">
                        <input class="form__field" placeholder="Age" name="name" id='name' required />
                        <label for="name" class="form__label" style="color:#E7E7E7">Age</label>
                    </div>
                    <div class="form__group field">
                        <input class="form__field" placeholder="Institution" name="name" id='name' required />
                        <label for="name" class="form__label" style="color:#E7E7E7">Institution</label>
                    </div>
                    <div class="form__group field">
                        <input class="form__field" placeholder="Phonenumber" name="name" id='name' required />
                        <label for="name" class="form__label" style="color:#E7E7E7">Phonenumber</label>
                    </div>
                </div>
                <span class="arrow" @onclick="@BlockGo" style="opacity: @op;"></span>
            </div>

        </div>



    </div>


@code{
    string StartAnim1stBlock, EndtAnim1stBlock,picClass, animClass;
    Timer timer,picTimer, blockTime;
    string picscr ;
    int op;
    string fadeInText = "fade-inText-fwdRB", fadeOutText = "fade-out-bckRB";


    protected override async Task OnInitializedAsync()
    {
        StartAnim1stBlock = "text-focus-in";
        StateHasChanged();
        timer = new Timer();
        timer.Interval = 2000;
        timer.Elapsed += counter;
        timer.Start();
        op = 0;
        animClass = "";
        picClass = "controlSize";


    }

    public void endFirstBlock()
    {
        StartAnim1stBlock = "slide-out-top";
        StateHasChanged();
    }

    private async void counter(object sender, ElapsedEventArgs e)
    {
        StartAnim1stBlock = "slide-tl";
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
        timer.Stop();

        picTimer = new Timer();
        picTimer.Interval = 1000;
        picTimer.Elapsed += picCounter;
        picTimer.Start();

    }
    public void Dispose()
    {
        if (timer != null)
        {
            timer.Dispose();
        }
        if (picTimer != null)
        {
            picTimer.Dispose();
        }
    }
    private async void picCounter(object sender, ElapsedEventArgs e)
    {
        picClass = "fade-in-fwd";
        op = 1;
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    public void BlockGo()
    {
        animClass = fadeOutText;
        {
            StateHasChanged();
        };
        blockTime = new Timer();
        blockTime.Interval = 650;
        blockTime.Elapsed += blockCounter;
        blockTime.Start();
    }
    private async void blockCounter(object sender, ElapsedEventArgs e)
    {
        animClass = fadeInText;
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
        blockTime.Stop();
    }
}