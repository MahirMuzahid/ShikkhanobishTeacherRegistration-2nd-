@page "/"
@using System.Timers
    <div class="gradientBAckground">
        <div style="flex:auto">
            <div class="@StartAnim1stBlock">
                <img class="@picClass" src="WhiteLogo.png" style="opacity: @op;" />
                Welcome To Shikkhanobish Teacher Registration<br>
                <div class="form__group field" style="opacity: @op;" >
                    <input class="form__field" placeholder="Name" name="name" id='name' required />
                    <label for="name" class="form__label">Name</label>
                </div>
            </div>
            
        </div>
        
        
        
    </div>


@code{
    string StartAnim1stBlock, EndtAnim1stBlock,picClass;
    Timer timer,picTimer;
    string picscr;
    int op;

    protected override async Task OnInitializedAsync()
    {
        StartAnim1stBlock = "text-focus-in";
        StateHasChanged();
        timer = new Timer();
        timer.Interval = 2000;
        timer.Elapsed += counter;
        timer.Start();
        op = 0;
        picClass = "controlSize";


    }

    public void endFirstBlock()
    {
        StartAnim1stBlock = "slide-out-top";
        StateHasChanged();
    }

    private async void counter(object sender, ElapsedEventArgs e)
    {
        StartAnim1stBlock = "slide-tl";
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
        timer.Stop();

        picTimer = new Timer();
        picTimer.Interval = 1000;
        picTimer.Elapsed += picCounter;
        picTimer.Start();

    }
    public void Dispose()
    {
        if (timer != null)
        {
            timer.Dispose();
        }
        if (picTimer != null)
        {
            picTimer.Dispose();
        }
    }
    private async void picCounter(object sender, ElapsedEventArgs e)
    {
        picClass = "fade-in-fwd";
        op = 1;
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

}